/* automatically generated by rust-bindgen 0.71.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const MAX_DEVICE_NAME_LEN: u32 = 255;
pub const BUSDIAG_MAX_EXTENDED_INFO: u32 = 130;
pub const BUSDIAG_NODE_MAX_EXTENDED_INFO: u32 = 100;
pub const DAL_FAILURE: i32 = -1;
pub const DAL_SUCCESS: u32 = 0;
pub const DAL_NOTUSED: u32 = 1;
pub type __gnuc_va_list = u32;
pub type va_list = u32;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 16usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 8usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 8usize];
};
pub type tDeviceId = i32;
pub const enCommonEvent_CommonEvent_BASE: enCommonEvent = 0;
pub const enCommonEvent_CommonEvent_WatchdogTriggered: enCommonEvent = 1;
pub const enCommonEvent_CommonEvent_IoSizeChanged: enCommonEvent = 2;
pub const enCommonEvent_CommonEvent_TOP: enCommonEvent = 3;
pub type enCommonEvent = ::std::os::raw::c_uint;
pub use self::enCommonEvent as tCommonEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stCommonEvent_WatchdogTriggered {
    pub Count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stCommonEvent_WatchdogTriggered"]
        [::std::mem::size_of::<stCommonEvent_WatchdogTriggered>() - 4usize];
    ["Alignment of stCommonEvent_WatchdogTriggered"]
        [::std::mem::align_of::<stCommonEvent_WatchdogTriggered>() - 4usize];
    ["Offset of field: stCommonEvent_WatchdogTriggered::Count"]
        [::std::mem::offset_of!(stCommonEvent_WatchdogTriggered, Count) - 0usize];
};
pub type tCommonEvent_WatchdogTriggered = stCommonEvent_WatchdogTriggered;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stCommonEvent_IoSizeChanged {
    pub OldInputSize: usize,
    pub OldOutputSize: usize,
    pub NewInputSize: usize,
    pub NewOutputSize: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stCommonEvent_IoSizeChanged"]
        [::std::mem::size_of::<stCommonEvent_IoSizeChanged>() - 16usize];
    ["Alignment of stCommonEvent_IoSizeChanged"]
        [::std::mem::align_of::<stCommonEvent_IoSizeChanged>() - 4usize];
    ["Offset of field: stCommonEvent_IoSizeChanged::OldInputSize"]
        [::std::mem::offset_of!(stCommonEvent_IoSizeChanged, OldInputSize) - 0usize];
    ["Offset of field: stCommonEvent_IoSizeChanged::OldOutputSize"]
        [::std::mem::offset_of!(stCommonEvent_IoSizeChanged, OldOutputSize) - 4usize];
    ["Offset of field: stCommonEvent_IoSizeChanged::NewInputSize"]
        [::std::mem::offset_of!(stCommonEvent_IoSizeChanged, NewInputSize) - 8usize];
    ["Offset of field: stCommonEvent_IoSizeChanged::NewOutputSize"]
        [::std::mem::offset_of!(stCommonEvent_IoSizeChanged, NewOutputSize) - 12usize];
};
pub type tCommonEvent_IoSizeChanged = stCommonEvent_IoSizeChanged;
pub type tError = u32;
#[doc = "!< ApplicationState_BASE"]
pub const enApplicationState_ApplicationState_BASE: enApplicationState = 0;
#[doc = "!< ApplicationState_Running"]
pub const enApplicationState_ApplicationState_Running: enApplicationState = 1;
#[doc = "!< ApplicationState_Stopped"]
pub const enApplicationState_ApplicationState_Stopped: enApplicationState = 2;
#[doc = "!< ApplicationState_Unconfigured"]
pub const enApplicationState_ApplicationState_Unconfigured: enApplicationState = 3;
#[doc = "!< ApplicationState_TOP"]
pub const enApplicationState_ApplicationState_TOP: enApplicationState = 4;
pub type enApplicationState = ::std::os::raw::c_uint;
pub use self::enApplicationState as tApplicationState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stApplicationStateChangedEvent {
    pub State: tApplicationState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stApplicationStateChangedEvent"]
        [::std::mem::size_of::<stApplicationStateChangedEvent>() - 4usize];
    ["Alignment of stApplicationStateChangedEvent"]
        [::std::mem::align_of::<stApplicationStateChangedEvent>() - 4usize];
    ["Offset of field: stApplicationStateChangedEvent::State"]
        [::std::mem::offset_of!(stApplicationStateChangedEvent, State) - 0usize];
};
pub type tApplicationStateChangedEvent = stApplicationStateChangedEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stDeviceInfo {
    pub DeviceId: tDeviceId,
    pub DeviceName: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stDeviceInfo"][::std::mem::size_of::<stDeviceInfo>() - 8usize];
    ["Alignment of stDeviceInfo"][::std::mem::align_of::<stDeviceInfo>() - 4usize];
    ["Offset of field: stDeviceInfo::DeviceId"]
        [::std::mem::offset_of!(stDeviceInfo, DeviceId) - 0usize];
    ["Offset of field: stDeviceInfo::DeviceName"]
        [::std::mem::offset_of!(stDeviceInfo, DeviceName) - 4usize];
};
pub type tDeviceInfo = stDeviceInfo;
#[doc = "!< BusState_NotEnabled"]
pub const enBusState_BusState_NotEnabled: enBusState = 0;
#[doc = "!< BusState_BusOk The bus is up and running"]
pub const enBusState_BusState_BusOk: enBusState = 1;
#[doc = "!< BusState_BusFault"]
pub const enBusState_BusState_BusFault: enBusState = 2;
#[doc = "!< BusState_BusNotCommunicating"]
pub const enBusState_BusState_BusNotCommunicating: enBusState = 3;
#[doc = "!< BusState_BusStopped"]
pub const enBusState_BusState_BusStopped: enBusState = 4;
#[doc = " This enum lists the state a bus can be in. The values correspond\n to the BUSSTATE_* defines from codesys (RtsIODrvItf.h)."]
pub type enBusState = ::std::os::raw::c_uint;
#[doc = " This enum lists the state a bus can be in. The values correspond\n to the BUSSTATE_* defines from codesys (RtsIODrvItf.h)."]
pub use self::enBusState as tBusState;
#[doc = "!< DiagnoseState_InvalidInputParameter"]
pub const enDiagnoseState_DiagnoseState_InvalidInputParameter: enDiagnoseState = -1;
#[doc = "!< DiagnoseState_NotEnabled"]
pub const enDiagnoseState_DiagnoseState_NotEnabled: enDiagnoseState = 0;
#[doc = "!< DiagnoseState_GetDiagInfo"]
pub const enDiagnoseState_DiagnoseState_GetDiagInfo: enDiagnoseState = 1;
#[doc = "!< DiagnoseState_DiagInfoAvailable"]
pub const enDiagnoseState_DiagnoseState_DiagInfoAvailable: enDiagnoseState = 2;
#[doc = "!< DiagnoseState_DiagInfoNotAvailable"]
pub const enDiagnoseState_DiagnoseState_DiagInfoNotAvailable: enDiagnoseState = 3;
#[doc = " The enum lists the states of an diagnose request. The values correspond\n to the values defined by codesys (NDSTATE_*) in RtsIODrvItf.h"]
pub type enDiagnoseState = ::std::os::raw::c_int;
#[doc = " The enum lists the states of an diagnose request. The values correspond\n to the values defined by codesys (NDSTATE_*) in RtsIODrvItf.h"]
pub use self::enDiagnoseState as tDiagnoseState;
#[doc = "!< BusMemberState_Configured"]
pub const enBusMemberState_BusMemberState_Configured: enBusMemberState = 1;
#[doc = "!< BusMemberState_Alive"]
pub const enBusMemberState_BusMemberState_Alive: enBusMemberState = 2;
#[doc = "!< BusMemberState_Faulted"]
pub const enBusMemberState_BusMemberState_Faulted: enBusMemberState = 4;
#[doc = " This enum list the flags for the DeviceState's extended info."]
pub type enBusMemberState = ::std::os::raw::c_uint;
#[doc = " This enum list the flags for the DeviceState's extended info."]
pub use self::enBusMemberState as tBusMemberState;
pub type tEventSource = *mut ::std::os::raw::c_void;
pub type tEventId = u32;
pub type tEventArgs = *mut ::std::os::raw::c_void;
pub type tEventHandler = ::std::option::Option<
    unsafe extern "C" fn(
        source: tEventSource,
        id: tEventId,
        arg: tEventArgs,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " This structure defines the Application interface of the DAL."]
pub type tApplicationDeviceInterface = stApplicationDeviceInterface;
pub type IApplication = *mut stApplicationDeviceInterface;
unsafe extern "C" {
    pub fn adi_GetApplicationInterface() -> *mut tApplicationDeviceInterface;
}
#[doc = " This structure defines the Application interface of the DAL."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stApplicationDeviceInterface {
    #[doc = " Opens i.e. initializes the DAL.\n @return DAL_FAILURE in case another instance is already running.\n         DAL_SUCCESS on success."]
    pub Init: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    #[doc = " Main cleanup routine for the DAL. Releases the allocated ressources, triggers\n closing of the devices etc.\n @note currently this never fails.\n @return DAL_SUCCESS."]
    pub Exit: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    #[doc = " ScanDevices() checks all shared objects contained in the device library\n search path (default path is /usr/lib/dal) and calls their initialisation\n functions.\n\n After a call to ScanDevices() adi->GetDeviceList() returns a list of all\n found devices along with their error states.\n\n @return DAL_SUCCESS if no errors occured, DAL_FAILURE otherwise"]
    pub ScanDevices: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    #[doc = " @brief Creates a list of the devices managed by the DAL.\n @param listCapacity The number of devices fitting in the supplied deviceList.\n @param deviceList This list is filled with up to listCapacity devices.\n @param deviceNumber The number of devices available.\n @return DAL_SUCCESS"]
    pub GetDeviceList: ::std::option::Option<
        unsafe extern "C" fn(
            listCapacity: usize,
            deviceList: *mut tDeviceInfo,
            deviceNumber: *mut usize,
        ) -> i32,
    >,
    #[doc = " Opens the device.\n @param deviceId Id of the device.\n @return Returns 0 on success, -1 otherwise."]
    pub OpenDevice: ::std::option::Option<unsafe extern "C" fn(deviceId: tDeviceId) -> i32>,
    #[doc = " Closes the device\n @param deviceId Id of the device.\n @return Returns 0 on success, -1 otherwise."]
    pub CloseDevice: ::std::option::Option<unsafe extern "C" fn(deviceId: tDeviceId) -> i32>,
    #[doc = " Checks whether the device is open or not.\n @param deviceId Id of the device.\n @return Returns true when device is open, false otherwise."]
    pub IsDeviceOpen: ::std::option::Option<unsafe extern "C" fn(deviceId: tDeviceId) -> bool>,
    #[doc = " Stores the name of the device in the supplied buffer.\n @param[in] deviceId Id of the device.\n @param[in] bufferSize Size of the bameBuffer\n @param[out] nameBuffer Pointer to the buffer to store the name in.\n @param[out] nameLength The resulting length of the string in nameBuffer.\n @return Returns DAL_SUCCESS on success, DAL_FAILURE otherwise."]
    pub GetDeviceName: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            bufferSize: usize,
            nameBuffer: *mut ::std::os::raw::c_char,
            nameLength: *mut usize,
        ) -> i32,
    >,
    #[doc = " Returns the devices flags\n @param deviceId\n @param flags Pointer to the flags\n @return Returns 0 on success, -1 otherwise."]
    pub GetDeviceFlags:
        ::std::option::Option<unsafe extern "C" fn(deviceId: tDeviceId, flags: *mut u32) -> i32>,
    #[doc = " Gets the sizes of the devices input and output.\n @param deviceId Id of the device.\n @param inputSize Pointer to where the size of the input will be stored.\n @param outputSize Pointer to where the size of the output will be stored.\n @return Returns 0 on success, -1 otherwise."]
    pub GetIoSizes: ::std::option::Option<
        unsafe extern "C" fn(deviceId: tDeviceId, inputSize: *mut u32, outputSize: *mut u32) -> i32,
    >,
    #[doc = " Configures a sub device.\n @param deviceId Id of the device.\n @param subdeviceId Id of the sub device.\n @param configData The device specific configuration.\n @return Returns 0 on success, -1 otherwise."]
    pub ConfigureSubdevice: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            subdeviceId: i32,
            configData: *mut ::std::os::raw::c_void,
        ) -> i32,
    >,
    #[doc = " Configures a device.\n @param deviceId Id of the device.\n @param configData The device specific configuration.\n @return Returns 0 on success, -1 otherwise."]
    pub ConfigureDevice: ::std::option::Option<
        unsafe extern "C" fn(deviceId: tDeviceId, configData: *mut ::std::os::raw::c_void) -> i32,
    >,
    #[doc = " Starts the writing of process data.\n @param deviceId Id of the device.\n @param taskId Id of the task.\n @return Returns 0 on success, -1 otherwise."]
    pub WriteStart:
        ::std::option::Option<unsafe extern "C" fn(deviceId: tDeviceId, taskId: u32) -> i32>,
    #[doc = " The WiteBit method writes one bit from data to the given offset.\n @param deviceId The device to write the bit to.\n @param bitOffset The bit offset to write the bit at.\n @param data Pointer from where the bit will be written from.\n @return Returns 0 on success, -1 otherwise."]
    pub WriteBit: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            taskId: u32,
            bitOffset: u32,
            data: *mut u8,
        ) -> i32,
    >,
    #[doc = " The WiteBool method writes one bit from data to the given offset.\n @param deviceId The device to write the bit to.\n @param bitOffset The bit offset to write the bit at.\n @param value Pointer from where the bit will be written from.\n @return Returns 0 on success, -1 otherwise."]
    pub WriteBool: ::std::option::Option<
        unsafe extern "C" fn(deviceId: tDeviceId, taskId: u32, bitOffset: u32, value: bool) -> i32,
    >,
    #[doc = " Writes size bytes from at the supplied offset to\n the process images of the device.\n @param deviceId Id of the device\n @param offset Offset where the data will be written at.\n @param size Size of the data to write.\n @param data The data to write.\n @return Returns 0 on success, -1 otherwise"]
    pub WriteBytes: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            taskId: u32,
            offset: u32,
            size: u32,
            data: *mut u8,
        ) -> i32,
    >,
    #[doc = " Finishes the writing of process data. Usually this is the point\n when the pi is committed to the device.\n @param deviceId The id of the device.\n @param taskId The id of the task.\n @return Returns 0 on success, -1 otherwise"]
    pub WriteEnd:
        ::std::option::Option<unsafe extern "C" fn(deviceId: tDeviceId, taskId: u32) -> i32>,
    #[doc = " Starts the reading of the pi.Usually this is the point when the pi\n is read out from the device.\n @param deviceId The id of the device.\n @param taskId The id of the task.\n @return Returns 0 on success, -1 otherwise."]
    pub ReadStart:
        ::std::option::Option<unsafe extern "C" fn(deviceId: tDeviceId, taskId: u32) -> i32>,
    #[doc = " The ReadBit method reads one bit from the given offset into data.\n @param deviceId The device to read the bit from.\n @param bitOffset The bit offset to read the bit at.\n @param data Pointer to where the bit will be read to.\n @return Returns 0 on success, -1 otherwise."]
    pub ReadBit: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            taskId: u32,
            bitOffset: u32,
            data: *mut u8,
        ) -> i32,
    >,
    #[doc = " The ReadBool method reads one bit from the given offset into value.\n @param deviceId The device to read the bit from.\n @param bitOffset The bit offset to read the bit at.\n @param data Pointer to where the bit will be read to.\n @return Returns 0 on success, -1 otherwise."]
    pub ReadBool: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            taskId: u32,
            bitOffset: u32,
            value: *mut bool,
        ) -> i32,
    >,
    #[doc = " Reads size bytes at offset from the devices pi into data.\n @param deviceId Id of the device\n @param offset Offset at which the data will be read.\n @param size Size of the data to read.\n @param data Pointer to the buffer.\n @return Returns 0 on success, -1 otherwise."]
    pub ReadBytes: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            taskId: u32,
            offset: u32,
            size: u32,
            data: *mut u8,
        ) -> i32,
    >,
    #[doc = " Finishes the reading of process data.\n @param deviceId The id of the device.\n @param taskId The if of the task.\n @return Returns 0 on success, -1 otherwise."]
    pub ReadEnd:
        ::std::option::Option<unsafe extern "C" fn(deviceId: tDeviceId, taskId: u32) -> i32>,
    #[doc = " Get the state of the device (corresponds to codesys' bus).\n @param[in] deviceId Id of the device.\n @param[in] bufferSize Size of the supplied buffer.\n @param[out] diagnoseBuffer Buffer where the state is stored in.\n @param[out] busState The state of the bus.\n @return Returns 0 on success, -1 otherwise."]
    pub DiagnoseGetDeviceState: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            bufferSize: u32,
            diagnoseBuffer: *mut u8,
            busState: *mut tBusState,
        ) -> i32,
    >,
    #[doc = " Get the state of a subdevice (corresponds to codesys' device).\n @param deviceId Id of the device.\n @param subdeviceId Id of the device to get the state from.\n @param[in] bufferSize Size of the supplied buffer.\n @param[out] diagnoseBuffer Buffer where the state data is stored in.\n @param[out] diagnoseState The state of the diagnose.\n @return Returns 0 on success, -1 otherwise."]
    pub DiagnoseGetSubdeviceState: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            subdeviceId: i32,
            bufferSize: usize,
            diagnoseBuffer: *mut u8,
            diagnoseState: *mut tDiagnoseState,
        ) -> i32,
    >,
    #[doc = " The RegisterEventCallback method registers a callback function,\n which will get called in case the given device generates an event.\n @param deviceId The device to register the callback for.\n @param eventCallback The callback function.\n @return Returns 0 on success, -1 otherwise.\n @see URL#generateUrl:fromParams:UnregisterEventCallback"]
    pub RegisterEventHandler: ::std::option::Option<
        unsafe extern "C" fn(
            deviceId: tDeviceId,
            handler: tEventHandler,
            userData: *mut ::std::os::raw::c_void,
        ) -> i32,
    >,
    #[doc = " The UnregisterEventCallback method unregisters a previously\n registered callback function.\n @param deviceId The device to unregister the callback for.\n @param eventCallback The callback to unregister.\n @return Returns 0 on success, -1 otherwise.\n @see URL#generateUrl:fromParams:RegisterEventCallback"]
    pub UnregisterEventHandler: ::std::option::Option<
        unsafe extern "C" fn(deviceId: tDeviceId, handler: tEventHandler) -> i32,
    >,
    #[doc = " The GetLastError method gets the last error set by the given device.\n @param deviceId The device to get the error from.\n @return Returns the error."]
    pub GetLastError:
        ::std::option::Option<unsafe extern "C" fn(arg1: tDeviceId, error: *mut tError) -> i32>,
    #[doc = " Sets the state of the PLC application. Its up to the devices to react accordingly.\n @param state The state of the application.\n @return DAL_SUCCESS on success.\n         DAL_FAILURE when at least one device returned an error."]
    pub ApplicationStateChanged:
        ::std::option::Option<unsafe extern "C" fn(event: tApplicationStateChangedEvent) -> i32>,
    #[doc = " @brief Calls a device-specific function implemented by a device library.\n\n @param fnName  Name of the function to invoke\n @param retVal  Return value\n @param ...     Additional parameters\n @return DAL_SUCCESS if the function was invoked successfully\n         DAL_FAILURE on error\n         DAL_NOTUSED if the function was not found"]
    pub CallDeviceSpecificFunction: ::std::option::Option<
        unsafe extern "C" fn(
            fnName: *const ::std::os::raw::c_char,
            retVal: *mut ::std::os::raw::c_void,
            ...
        ) -> i32,
    >,
    #[doc = " @brief Calls a device-specific function implemented by a device library.\n\n @param fnName  Name of the function to invoke\n @param retVal  Return value\n @param ...     Additional parameters\n @return DAL_SUCCESS if the function was invoked successfully\n         DAL_FAILURE on error\n         DAL_NOTUSED if the function was not found"]
    pub VCallDeviceSpecificFunction: ::std::option::Option<
        unsafe extern "C" fn(
            fnName: *const ::std::os::raw::c_char,
            retVal: *mut ::std::os::raw::c_void,
            args: va_list,
        ) -> i32,
    >,
    #[doc = " Sets the watchdog time. The time until the watchdog triggers\n is the multiplication of factor and timeout_us.\n @param factor The factor specifies how often the timeout_us\n has to elapse until the watchdog triggers.\n @param timeout_us The timeout of the watchdog in microseconds.\n @return Return DAL_SUCCESS on success, DAL_FAILURE otherwise."]
    pub WatchdogSetTime:
        ::std::option::Option<unsafe extern "C" fn(factor: u32, timeout_us: u32) -> i32>,
    #[doc = " Starts the watchdog.\n @return DAL_SUCCESS on"]
    pub WatchdogStart: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    #[doc = " Stops the watchdog.\n @return Return DAL_SUCCESS on success, DAL_FAILURE otherwise."]
    pub WatchdogStop: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    #[doc = " Triggers the watchdog.\n @return Return DAL_SUCCESS on success, DAL_FAILURE otherwise."]
    pub WatchdogTrigger: ::std::option::Option<unsafe extern "C" fn() -> i32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stApplicationDeviceInterface"]
        [::std::mem::size_of::<stApplicationDeviceInterface>() - 136usize];
    ["Alignment of stApplicationDeviceInterface"]
        [::std::mem::align_of::<stApplicationDeviceInterface>() - 4usize];
    ["Offset of field: stApplicationDeviceInterface::Init"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, Init) - 0usize];
    ["Offset of field: stApplicationDeviceInterface::Exit"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, Exit) - 4usize];
    ["Offset of field: stApplicationDeviceInterface::ScanDevices"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, ScanDevices) - 8usize];
    ["Offset of field: stApplicationDeviceInterface::GetDeviceList"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, GetDeviceList) - 12usize];
    ["Offset of field: stApplicationDeviceInterface::OpenDevice"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, OpenDevice) - 16usize];
    ["Offset of field: stApplicationDeviceInterface::CloseDevice"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, CloseDevice) - 20usize];
    ["Offset of field: stApplicationDeviceInterface::IsDeviceOpen"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, IsDeviceOpen) - 24usize];
    ["Offset of field: stApplicationDeviceInterface::GetDeviceName"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, GetDeviceName) - 28usize];
    ["Offset of field: stApplicationDeviceInterface::GetDeviceFlags"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, GetDeviceFlags) - 32usize];
    ["Offset of field: stApplicationDeviceInterface::GetIoSizes"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, GetIoSizes) - 36usize];
    ["Offset of field: stApplicationDeviceInterface::ConfigureSubdevice"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, ConfigureSubdevice) - 40usize];
    ["Offset of field: stApplicationDeviceInterface::ConfigureDevice"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, ConfigureDevice) - 44usize];
    ["Offset of field: stApplicationDeviceInterface::WriteStart"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, WriteStart) - 48usize];
    ["Offset of field: stApplicationDeviceInterface::WriteBit"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, WriteBit) - 52usize];
    ["Offset of field: stApplicationDeviceInterface::WriteBool"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, WriteBool) - 56usize];
    ["Offset of field: stApplicationDeviceInterface::WriteBytes"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, WriteBytes) - 60usize];
    ["Offset of field: stApplicationDeviceInterface::WriteEnd"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, WriteEnd) - 64usize];
    ["Offset of field: stApplicationDeviceInterface::ReadStart"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, ReadStart) - 68usize];
    ["Offset of field: stApplicationDeviceInterface::ReadBit"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, ReadBit) - 72usize];
    ["Offset of field: stApplicationDeviceInterface::ReadBool"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, ReadBool) - 76usize];
    ["Offset of field: stApplicationDeviceInterface::ReadBytes"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, ReadBytes) - 80usize];
    ["Offset of field: stApplicationDeviceInterface::ReadEnd"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, ReadEnd) - 84usize];
    ["Offset of field: stApplicationDeviceInterface::DiagnoseGetDeviceState"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, DiagnoseGetDeviceState) - 88usize];
    ["Offset of field: stApplicationDeviceInterface::DiagnoseGetSubdeviceState"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, DiagnoseGetSubdeviceState) - 92usize];
    ["Offset of field: stApplicationDeviceInterface::RegisterEventHandler"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, RegisterEventHandler) - 96usize];
    ["Offset of field: stApplicationDeviceInterface::UnregisterEventHandler"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, UnregisterEventHandler) - 100usize];
    ["Offset of field: stApplicationDeviceInterface::GetLastError"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, GetLastError) - 104usize];
    ["Offset of field: stApplicationDeviceInterface::ApplicationStateChanged"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, ApplicationStateChanged) - 108usize];
    ["Offset of field: stApplicationDeviceInterface::CallDeviceSpecificFunction"][::std::mem::offset_of!(
        stApplicationDeviceInterface,
        CallDeviceSpecificFunction
    ) - 112usize];
    ["Offset of field: stApplicationDeviceInterface::VCallDeviceSpecificFunction"][::std::mem::offset_of!(
        stApplicationDeviceInterface,
        VCallDeviceSpecificFunction
    ) - 116usize];
    ["Offset of field: stApplicationDeviceInterface::WatchdogSetTime"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, WatchdogSetTime) - 120usize];
    ["Offset of field: stApplicationDeviceInterface::WatchdogStart"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, WatchdogStart) - 124usize];
    ["Offset of field: stApplicationDeviceInterface::WatchdogStop"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, WatchdogStop) - 128usize];
    ["Offset of field: stApplicationDeviceInterface::WatchdogTrigger"]
        [::std::mem::offset_of!(stApplicationDeviceInterface, WatchdogTrigger) - 132usize];
};
